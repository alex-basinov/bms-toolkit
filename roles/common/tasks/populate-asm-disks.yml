- name: Collect new disk facts
  setup:
    gather_subset:
      - '!all'
      - '!any'
      - devices
  tags: populate-asm-disks

- name: Determine real paths of block devices
  ansible.builtin.shell: "readlink -f {{ item.1.blk_device }}"
  with_subelements:
   - "{{ asm_disks }}"
   - disks
  register: real_paths
  changed_when: false
  tags: populate-asm-disks

    
- name: Update asm_disks with real paths
  set_fact:
    asm_disks_normalized: "{{ asm_disks_updated | from_yaml }}"
  vars:
    asm_disks_updated: >
      {% set disks = asm_disks | json_query('[].{diskgroup: diskgroup, disks: disks}') %}
      {% for disk_group in disks %}
        {% for disk in disk_group.disks %}
          {% set real_path = real_paths.results | selectattr('item.1.blk_device', 'equalto', disk.blk_device) | map(attribute='stdout') | list %}
          {% if real_path %}
            {% set _ = disk.update({'real_path': real_path | first}) %}
          {% endif %}
        {% endfor %}
      {% endfor %}
      {{ disks }}


- name: Add partition IDs to asm_disks
  set_fact:
    asm_disks: "{{ asm_disks_partitions | from_yaml }}"
  vars:
    asm_disks_partitions: >
      {% set updated_disks = [] %}
      {% for disk_group in asm_disks_normalized %}
        {% set updated_group_disks = [] %}
        {% for disk in disk_group.disks %}
          {% set real_device = disk.real_path | regex_replace('^/dev/', '') %}
          {% set device_facts = ansible_facts.devices[real_device] if real_device in ansible_facts.devices else {} %}
          {% set partitions = device_facts.partitions if device_facts and 'partitions' in device_facts else {} %}
          {% if partitions %}
            {% set first_partition_key = partitions.keys() | list | sort | first %}
            {% set first_partition = '/dev/' + first_partition_key %}
          {% else %}
            {% set first_partition = 'No partition' %}
          {% endif %}
          {% set disk_with_partition = disk | combine({'first_partition_id': first_partition}) %}
          {% set _ = updated_group_disks.append(disk_with_partition) %}
        {% endfor %}
        {% set updated_group = {'diskgroup': disk_group.diskgroup, 'disks': updated_group_disks} %}
        {% set _ = updated_disks.append(updated_group) %}
      {% endfor %}
      {{ updated_disks }}
  tags: populate-asm-disks

