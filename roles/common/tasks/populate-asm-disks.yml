- name: Resolve blk_device paths to first partition paths if they exist
  ansible.builtin.shell: >
    set -o pipefail;
    case "{{ item.blk_device }}" in
      /dev/disk/by-id/*)
        part_path="{{ item.blk_device }}"-part1;
        ;;
      /dev/mapper/*)
        part_path="{{ item.blk_device }}"p1;
        ;;
      /dev/*)
        by_id_link=$(find /dev/disk/by-id/ -type l -exec sh -c 'echo $1 $(readlink -f $1)' _ {} \; | awk -v dev="{{ item.blk_device }}" '$2==dev {print $1}' | grep -vE '/dev/disk/by-id/(nvme-|scsi-|wwn-)' | head -n 1);
        part_path="${by_id_link}"-part1;
        ;;
    esac;
    if [[ -e "$part_path" ]]; then
      echo "$part_path"
    else
      echo ""
    fi
  loop: "{{ asm_disks | json_query('[].disks[]') }}"
  register: disk_paths
  tags: populate-asm-disks


- name: Update asm_disks with partition paths
  set_fact:
    asm_disks: "{{ asm_disks_updated | from_yaml }}"
  vars:
    asm_disks_updated: >
      {% set new_disks = [] %}
      {% for disk_group in asm_disks %}
        {% set new_group_disks = [] %}
        {% for disk in disk_group.disks %}
          {% set output = disk_paths.results | selectattr('item.blk_device', 'equalto', disk.blk_device) | map(attribute='stdout') | first %}
          {% set new_disk = disk | combine({'first_partition_id': output}) %}
          {% set _ = new_group_disks.append(new_disk) %}
        {% endfor %}
        {% set new_disk_group = {'diskgroup': disk_group.diskgroup, 'disks': new_group_disks} %}
        {% set _ = new_disks.append(new_disk_group) %}
      {% endfor %}
      {{ new_disks }}
  tags: populate-asm-disks